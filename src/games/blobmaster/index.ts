// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.

// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here

// base game classes
import { BaseAI, BaseGame, BaseGameManager, BaseGameObject,
         BaseGameObjectFactory, BaseGameSettingsManager, BasePlayer,
         makeNamespace } from "~/core/game";

// mixins
import { ITiledPlayer, ITurnBasedPlayer, ITwoPlayerPlayer, mixTiled,
         mixTurnBased, mixTwoPlayer } from "~/core/game/mixins";

// extract game object constructor args
import { FirstArgumentFromConstructor } from "~/utils";

/**
 * The interface the Player for the Blobmaster game
 * must implement from mixed in game logic.
 */
export interface IBaseBlobmasterPlayer extends
    BasePlayer,
    ITwoPlayerPlayer,
    ITurnBasedPlayer,
    ITiledPlayer {
}

const base0 = {
    AI: BaseAI,
    Game: BaseGame,
    GameManager: BaseGameManager,
    GameObject: BaseGameObject,
    GameSettings: BaseGameSettingsManager,
};

const base1 = mixTwoPlayer(base0);
const base2 = mixTurnBased(base1);
const base3 = mixTiled(base2);

const mixed = base3;

/** The base AI class for the Blobmaster game will mixin logic. */
class BaseBlobmasterAI extends mixed.AI {}

/** The base Game class for the Blobmaster game will mixin logic. */
class BaseBlobmasterGame extends mixed.Game {}

/** The base GameManager class for the Blobmaster game will mixin logic. */
class BaseBlobmasterGameManager extends mixed.GameManager {}

/** The base GameObject class for the Blobmaster game will mixin logic. */
class BaseBlobmasterGameObject extends mixed.GameObject {}

/** The base GameSettings class for the Blobmaster game will mixin logic. */
class BaseBlobmasterGameSettings extends mixed.GameSettings {}

/** The Base classes that game classes build off of. */
export const BaseClasses = {
    AI: BaseBlobmasterAI,
    Game: BaseBlobmasterGame,
    GameManager: BaseBlobmasterGameManager,
    GameObject: BaseBlobmasterGameObject,
    GameSettings: BaseBlobmasterGameSettings,
};

// Now all the base classes are created;
// so we can start importing/exporting the classes that need them.

/** All the possible properties for an Blob. */
export interface IBlobProperties {
    /**
     * How many more Blobs this Blobmaster can spawn this turn.
     */
    dropsLeft?: number;

    /**
     * If this Blob is a Blobmaster.
     */
    isBlobmaster?: boolean;

    /**
     * If this Blob is dead and has been removed from the game.
     */
    isDead?: boolean;

    /**
     * How many more moves this Blob can do this turn.
     */
    movesLeft?: number;

    /**
     * The Player that owns and can control this Blob, or undefined if this is
     * a wall.
     */
    owner?: Player;

    /**
     * The width and height of this Blob.
     */
    size?: number;

    /**
     * The top-left (smallest x,y) Tile that this Blob occupies.
     */
    tile?: Tile;

    /**
     * How many more turns till this wall disappears, or negative.
     */
    turnsTillDead?: number;

    /**
     * How many more turns till this blob becomes a wall, or negative.
     */
    turnsTillHardened?: number;

}

/**
 * Argument overrides for Blob's drop function. If you return an object of this
 * interface from the invalidate functions, the value(s) you set will be used
 * in the actual function.
 */
export interface IBlobDropArgs {
    /**
     * The Tile to spawn a Blob on.
     */
    tile?: Tile;
}

/**
 * Argument overrides for Blob's harden function. If you return an object of
 * this interface from the invalidate functions, the value(s) you set will be
 * used in the actual function.
 */
export interface IBlobHardenArgs {
}

/**
 * Argument overrides for Blob's move function. If you return an object of this
 * interface from the invalidate functions, the value(s) you set will be used
 * in the actual function.
 */
export interface IBlobMoveArgs {
    /**
     * The tile for this Blob to move onto.
     */
    tile?: Tile;
}

/** All the possible properties for an GameObject. */
export interface IGameObjectProperties {
}

/** All the possible properties for an Player. */
export interface IPlayerProperties {
    /**
     * The Blobmaster owned by this Player.
     */
    blobmaster?: Blob;

    /**
     * Every Blob owned by this Player.
     */
    blobs?: Blob[];

    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    clientType?: string;

    /**
     * Tiles which future blobs will drop onto, this determines the order in
     * which simultaneous drops are handled.
     */
    drops?: Tile[];

    /**
     * If the player lost the game or not.
     */
    lost?: boolean;

    /**
     * The name of the player.
     */
    name?: string;

    /**
     * This player's opponent in the game.
     */
    opponent?: Player;

    /**
     * The reason why the player lost the game.
     */
    reasonLost?: string;

    /**
     * The reason why the player won the game.
     */
    reasonWon?: string;

    /**
     * How many points this player has.
     */
    score?: number;

    /**
     * How much slime this player has.
     */
    slime?: number;

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    timeRemaining?: number;

    /**
     * If the player won the game or not.
     */
    won?: boolean;

}

/** All the possible properties for an Tile. */
export interface ITileProperties {
    /**
     * The Blob that is on this Tile, undefined otherwise.
     */
    blob?: Blob;

    /**
     * The owner of the blob dropping onto this tile, or undefined.
     */
    dropOwner?: Player;

    /**
     * Turns until a blob is dropped onto this tile. negative if no blob is in
     * transit to this tile.
     */
    dropTurnsLeft?: number;

    /**
     * How much slime exists on this Tile.
     */
    slime?: number;

    /**
     * The Tile to the 'East' of this one (x+1, y). Undefined if out of bounds
     * of the map.
     */
    tileEast?: Tile;

    /**
     * The Tile to the 'North' of this one (x, y-1). Undefined if out of bounds
     * of the map.
     */
    tileNorth?: Tile;

    /**
     * The Tile to the 'South' of this one (x, y+1). Undefined if out of bounds
     * of the map.
     */
    tileSouth?: Tile;

    /**
     * The Tile to the 'West' of this one (x-1, y). Undefined if out of bounds
     * of the map.
     */
    tileWest?: Tile;

    /**
     * The x (horizontal) position of this Tile.
     */
    x?: number;

    /**
     * The y (vertical) position of this Tile.
     */
    y?: number;

}

export * from "./blob";
export * from "./game-object";
export * from "./player";
export * from "./tile";
export * from "./game";
export * from "./game-manager";
export * from "./ai";

import { Blob } from "./blob";
import { GameObject } from "./game-object";
import { Player } from "./player";
import { Tile } from "./tile";

import { AI } from "./ai";
import { BlobmasterGame } from "./game";
import { BlobmasterGameManager } from "./game-manager";
import { BlobmasterGameSettingsManager } from "./game-settings";

/** The arguments used to construct a Blob */
export type BlobArgs = FirstArgumentFromConstructor<typeof Blob>;

/** The arguments used to construct a Tile */
export type TileArgs = FirstArgumentFromConstructor<typeof Tile>;

/**
 * The factory that **must** be used to create any game objects in
 * the Blobmaster game.
 */
export class BlobmasterGameObjectFactory extends BaseGameObjectFactory {
    /**
     * Creates a new Blob in the Game and tracks it for all players.
     *
     * @param args - Data about the Blob to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Blob hooked up in the game and ready for you to use.
     */
    public blob<T extends BlobArgs>(
        args: Readonly<T>,
    ): Blob & T {
        return this.createGameObject("Blob", Blob, args);
    }

    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    public tile<T extends TileArgs>(
        args: Readonly<T>,
    ): Tile & T {
        return this.createGameObject("Tile", Tile, args);
    }

}

/**
 * The shared namespace for Blobmaster that is used to
 * initialize each game instance.
 */
export const Namespace = makeNamespace({
    AI,
    Game: BlobmasterGame,
    GameManager: BlobmasterGameManager,
    GameObjectFactory: BlobmasterGameObjectFactory,
    GameSettingsManager: BlobmasterGameSettingsManager,
    Player,

    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Blobmaster",
    gameSettingsManager: new BlobmasterGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {
            },
            functions: {
                runTurn: {
                    args: [
                    ],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                bigBlobSpeed: {
                    typeName: "int",
                },
                blobCost: {
                    typeName: "int",
                },
                blobUpkeep: {
                    typeName: "int",
                },
                blobmasters: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Blob,
                        nullable: false,
                    },
                },
                blobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Blob,
                        nullable: false,
                    },
                },
                bonusSlimeForFewerBlobs: {
                    typeName: "int",
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                deathSlime: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: GameObject,
                        nullable: false,
                    },
                },
                hardenReward: {
                    typeName: "int",
                },
                hardenTime: {
                    typeName: "int",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxDropsPerTurn: {
                    typeName: "int",
                },
                maxPlayerSlime: {
                    typeName: "int",
                },
                maxSlimeSpawnedOnTile: {
                    typeName: "int",
                },
                maxStartingWalls: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                minStartingWalls: {
                    typeName: "int",
                },
                perTileDropDelay: {
                    typeName: "float",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Player,
                        nullable: false,
                    },
                },
                pointsToWin: {
                    typeName: "int",
                },
                session: {
                    typeName: "string",
                },
                slimeSpawnRate: {
                    typeName: "int",
                },
                smallBlobSpeed: {
                    typeName: "int",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Tile,
                        nullable: false,
                    },
                },
                tilesCoveredToWin: {
                    typeName: "int",
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                wallLifespan: {
                    typeName: "int",
                },
            },
            functions: {
            },
        },
        Blob: {
            parentClassName: "GameObject",
            attributes: {
                dropsLeft: {
                    typeName: "int",
                },
                isBlobmaster: {
                    typeName: "boolean",
                },
                isDead: {
                    typeName: "boolean",
                },
                movesLeft: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: true,
                },
                size: {
                    typeName: "int",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                turnsTillDead: {
                    typeName: "int",
                },
                turnsTillHardened: {
                    typeName: "int",
                },
            },
            functions: {
                drop: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                harden: {
                    args: [
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                blobmaster: {
                    typeName: "gameObject",
                    gameObjectClass: Blob,
                    nullable: true,
                },
                blobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Blob,
                        nullable: false,
                    },
                },
                clientType: {
                    typeName: "string",
                },
                drops: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Tile,
                        nullable: false,
                    },
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                score: {
                    typeName: "int",
                },
                slime: {
                    typeName: "int",
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {
            },
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                blob: {
                    typeName: "gameObject",
                    gameObjectClass: Blob,
                    nullable: true,
                },
                dropOwner: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: true,
                },
                dropTurnsLeft: {
                    typeName: "int",
                },
                slime: {
                    typeName: "int",
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {
            },
        },
    },
});
